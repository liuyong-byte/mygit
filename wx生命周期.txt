页面生命周期函数
onload onshow onready  onhide onshow onuload
module.exports或者exports 模块化暴露接口 通过接口调用模块内容 接口.模块内容
export 与 export default 是es6的对象解构导出
export需要import {}明确变量导出 export default不需要{}导出只存在一个


组件生命周期函数
created创建 attached 进图ready准备 moved移动 detached移除 error错误

组件通信 
relations：{“组件”:{type:"",关系组件生命周期函数}}
可以自定义数据 this.data 在data数据里面是初始化 也可以在生命周期函数里面定义
只要在页面onready之前加载获取就ok

on是监听事件 off是取消事件
sync异步

localstorage 浏览器
sessionstorage会话缓存
lang="en" manifest="html.appcache" manifest清单缓存
storage微信缓存
set get remove clear
this.triggerEvent('myevent', myEventDetail参数, myEventOption冒泡捕获)
组件自带

父组件传参子组件采用 properites这是微信的 vue与react是props
子传父
当子组件在父组件里面 我们在父组件的子组件里面包含bind:自定义事件=“父事件”
然后子组件调用this.triggerEvent/vue采用$emit触发父事件 
在父组件里面
vue直接调用父事件函数带一个参数接收
微信
是采用event事件集合detail.属性来获取
表单提交用e.detail.value({"key":"value"})获取
以上是组件获取
路由跳转通过options.属性获取
navigator to
currenttaget单纯点击事件包含Mark mut
target包含触摸事件touch 
相同点：id dataset(data前缀提交） detail（获取组件与表单（需要value属性））
 pagex/y clientx/y offsetleft/top

export default new vuex.Store({
   state,//数据仓库
   actions,//分发事件commit异步dispatch
   mutations,//同步事件commit
   modules,//模块store
   getters,//纯函数读取 反引号换行输出
})


const state={//数据库
        msg:"hello world you me",
        as:"",
        r:""
    };
const actions={//分发事件事件回调
        insert({commit}){
            commit('insert');
        }
    };
const modules={//外部模板
        "mod":mod.mod
    };
const getters={//从数据仓库取数据 纯函数只能取
        qu(state){//创建一个数据仓库对象
          return state.r;
        }
    };
const mutations={//存入数据库的api 更新state方法
        insert(){
           axios.get("http://localhost:8082/think/Dome/Api/api/t/狮子").then(response=>(state.r=response.data))
        }
    };




